%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/gech/.ros/baseMotion.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/08/05 10:04:41

%% Initialize variables.
filename = '/home/gech/.ros/baseMotion.csv';
delimiter = ' ';
startRow = 2;

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
t = dataArray{:, 1};
px = dataArray{:, 2};
py = dataArray{:, 3};
pz = dataArray{:, 4};
rw = dataArray{:, 5};
rx = dataArray{:, 6};
ry = dataArray{:, 7};
rz = dataArray{:, 8};
vx = dataArray{:, 9};
vy = dataArray{:, 10};
vz = dataArray{:, 11};
wx = dataArray{:, 12};
wy = dataArray{:, 13};
wz = dataArray{:, 14};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Plot

dt = (t(2)-t(1));

h = figure();
subplot(3,1,1)
title('position')
hold on
plot(t, px, 'b.-')
grid on
xlabel('time [s]')
ylabel('x [m]')
subplot(3,1,2)
hold on
plot(t, py, 'b.-')
grid on
xlabel('time [s]')
ylabel('y [m]')
subplot(3,1,3)
hold on
plot(t, pz, 'b.-')
grid on
xlabel('time [s]')
ylabel('z [m]')



h = figure();
subplot(4,1,1)
title('orientation')
hold on
plot(t, rw, 'b.-')
grid on
xlabel('time [s]')
ylabel('w ')
subplot(4,1,2)
title('orientation')
hold on
plot(t, rx, 'b.-')
grid on
xlabel('time [s]')
ylabel('x ')
subplot(4,1,3)
hold on
plot(t, ry, 'b.-')
grid on
xlabel('time [s]')
ylabel('y')
subplot(4,1,4)
hold on
plot(t, rz, 'b.-')
grid on
xlabel('time [s]')
ylabel('z')


h = figure();
subplot(3,1,1)
title('lin velocity')
hold on
plot(t, vx, 'b.-')
plot(t(1:end-1), diff(px).*1/dt, 'r.-')
grid on
xlabel('time [s]')
ylabel('x [m/s]')
subplot(3,1,2)
hold on
plot(t, vy, 'b.-')
plot(t(1:end-1), diff(py).*1/dt, 'r.-')
grid on
xlabel('time [s]')
ylabel('y [m/s]')
subplot(3,1,3)
hold on
plot(t, vz, 'b.-')
plot(t(1:end-1), diff(pz).*1/dt, 'r.-')
grid on
xlabel('time [s]')
ylabel('z [m/s]')



h = figure();
subplot(3,1,1)
title('ang velocity')
hold on
plot(t, wx, 'b.-')
grid on
xlabel('time [s]')
ylabel('x [rad/s]')
subplot(3,1,2)
hold on
plot(t, wy, 'b.-')
grid on
xlabel('time [s]')
ylabel('y [rad/s]')
subplot(3,1,3)
hold on
plot(t, wz, 'b.-')
grid on
xlabel('time [s]')
ylabel('z [rad/s]')
